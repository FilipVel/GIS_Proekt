
@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>Intro to MapView - Create a 2D map</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    <style>
        html, body {
            padding: 0;
           
            height: 100%;
            width: 100%;
        }

        #viewDiv {
            margin: 0px 0px 0px 0px;
        }

        #button {
            margin: 50px 0px 0px 0px;
            
        }

      


    </style>
    <link rel="stylesheet" href="https://jsdev.arcgis.com/4.1/esri/css/main.css">
    <link rel="stylesheet" href="https://jsdev.arcgis.com/4.1/dijit/themes/soria/soria.css">
    <script src="https://jsdev.arcgis.com/4.1/"></script>

    <script>
        require([
            "esri/Map",
            "esri/views/MapView",
            "esri/layers/FeatureLayer",
            "esri/layers/MapImageLayer",
            "esri/renderers/UniqueValueRenderer",
            "esri/renderers/ClassBreaksRenderer",
            "esri/symbols/SimpleMarkerSymbol",
            "esri/symbols/SimpleFillSymbol",
            "esri/widgets/Legend",
            "esri/PopupTemplate",
            "esri/symbols/TextSymbol",
            "dojo/domReady!"
        ], function (Map, MapView, FeatureLayer, MapImageLayer,
            UniqueValueRenderer, ClassBreaksRenderer,
            SimpleMarkerSymbol, SimpleFillSymbol,
            Legend, PopupTemplate, TextSymbol) {
                var map = new Map({
                    basemap: "gray"
                });

                var view = new MapView({
                    container: "viewDiv",
                    map: map,
                    center: [-104.928591, 39.732578],
                    zoom: 10
                });

                var patientDataLayer = new FeatureLayer({
                    url: "https://services9.arcgis.com/OBmD3AfDKnPuLBBF/arcgis/rest/services/PatientData/FeatureServer/0?token=JRGOSYVdwrIWh-_l2IR7_5u6xXOGwW5yeefrn-vIqKvo7iZfLfSgsxi8D9gAFuGJXn9JytXKuJWQBHtRdA4zHQjhK0a7VEKKjNxYpuPKnpzCTG1oi5LYDIHvh64bXIVmBAQufT8dxLV5YupsxXMy8e59d6MBB4uLjVd_w64OmENvVM1xTeyR7jMJFskGdtgrIxTIaUKhy1_S9qF9iP3xn1JYQ7UE_hdCXtmB9saeeTooIpRaNPuDp0CRWHCqAfGb"
                });
                map.add(patientDataLayer);

                /*******************************************************
                 * Visualizing Spatial Patterns - Discrete Data
                 *******************************************************/

                // Discrete Data: Construct a UniqueValueRenderer
                var uvRenderer = new UniqueValueRenderer({
                    field: "Sex"
                });

                // Discrete Data: Specify unique values and their symbols
                uvRenderer.addUniqueValueInfo({
                    value: "male",
                    symbol: new SimpleMarkerSymbol({
                        style: "square",
                        //color: [0,255,0,0.2]
                        color: [66, 165, 245, 0.3]
                    })
                });
                uvRenderer.addUniqueValueInfo({
                    value: "female",
                    symbol: new SimpleMarkerSymbol({
                        style: "square",
                        //color: [0,255,0,0.2]
                        color: [236, 64, 122, 0.3]
                    })
                });

                // Discrete Data: Apply the renderer to the layer
                //patientDataLayer.renderer = uvRenderer;


                /*******************************************************
                 * Visualizing Spatial Patterns - Continuous Data
                 *******************************************************/

                // Patient Data: Construct a ClassBreaksRenderer
                var cbRenderer = new ClassBreaksRenderer({
                    field: "Age"
                });

                // Patient Data: Specify intervals and their symbols
                cbRenderer.addClassBreakInfo({
                    minValue: 0,
                    maxValue: 4,
                    symbol: new SimpleMarkerSymbol({
                        style: "diamond",
                        color: [255, 0, 0, 0.25],
                        size: 15
                    })
                });
                cbRenderer.addClassBreakInfo({
                    minValue: 5,
                    maxValue: 13,
                    symbol: new SimpleMarkerSymbol({
                        style: "diamond",
                        color: [0, 0, 255, 0.15],
                        size: 15
                    })
                });

                // Patient Data: Apply renderer to layer
                patientDataLayer.renderer = cbRenderer;


                // Median Age Data: Construct a ClassBreaksRenderer
                var ageRenderer = new ClassBreaksRenderer({
                    field: "POP0_CY",
                    classBreakInfos: [{
                        minValue: 0,
                        maxValue: 2000,
                        symbol: new SimpleFillSymbol({ color: "#e5f5e0" }),
                        label: "0 - 2000"
                    }, {
                        minValue: 2001,
                        maxValue: 4000,
                        symbol: new SimpleFillSymbol({ color: "#a1d99b" }),
                        label: "2001 - 4000"
                    }, {
                        minValue: 4001,
                        maxValue: 6000,
                        symbol: new SimpleFillSymbol({ color: "#31a354" }),
                        label: "4001 - 6000"
                    }]
                });

                // Median Age Data: Apply renderer when constructing layer
                //                  (Renderer will be applied server-side)
                var medianAgeLayer = new MapImageLayer({
                    url: "http://demographics6.arcgis.com/arcgis/rest/services/USA_Demographics_and_Boundaries_2016/MapServer",
                    sublayers: [
                        {
                            id: 123,
                            renderer: ageRenderer,
                            source: {
                                mapLayerId: 10
                            }
                        }
                    ]
                });

                // Median Age Data: Add layer to the map at index 0
                map.add(medianAgeLayer, 0);


                /************************************************
                 * Visualizing Spatial Data - Other Media
                 ************************************************/

                // Legend widget
                var myLegend = new Legend({
                    view: view,
                    layerInfos: [{
                        layer: patientDataLayer,
                        title: "Patient age proportions"
                    }, {
                        layer: medianAgeLayer,
                        title: "Number of 0 - 4 year olds"
                    }]
                });
                view.ui.add(myLegend, "bottom-right");
                view.then(function () {
                    // wait to start the widget until the view is ready
                    myLegend.startup();
                });

            var agePopupTemplate = new PopupTemplate({
                title: "Young Children in<br>Zip Code {ID}",
                content: "In 2016, out of {TOTPOP_CY} people " +
                    "in this zip code, <b>{POP0_CY}</b> " +
                    "were four years of age or younger.",
                fieldInfos: [{
                    fieldName: "TOTPOP_CY",
                    format: {
                        digitSeparator: true,
                        places: 0
                    }
                }, {
                    fieldName: "POP0_CY",
                    format: {
                        digitSeparator: true,
                        places: 0
                    }
                }, {
                    fieldName: "ID"
                }]
            });
            //
            // Apply the popup template to the sublayer
            var sublayer = medianAgeLayer.sublayers.items[0];
            sublayer.popupTemplate = agePopupTemplate;
            //
            // Tell the view how to position the popup
            view.popup.set("dockOptions", {
                breakpoint: false,
                position: "auto"
            });

            // Labels
            sublayer.labelsVisible = true;
            sublayer.labelingInfo = [{
                labelExpression: "[ID]",
                labelPlacement: "always-horizontal",
                symbol: new TextSymbol({
                    color: [255, 255, 255, 1.0],
                    font: {
                        size: 12,
                        weight: "bolder"
                    }
                })
            }];


            $("#satelite").on("click", function () {
                map.basemap = "satellite";
            });

            $("#topo").on("click", function () {
                map.basemap = "topo";
            });

            $("#gray").on("click", function () {
                map.basemap = "gray";
            });
            $("#street").on("click", function () {
                map.basemap = "streets";
            });
            });
    </script>
</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("Application name", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("Home", "Index", "Home")</li>
                    <li>@Html.ActionLink("Areas", "Index", "MK_PROTECTEDAREAS_EEACDDAV15")</li>
                    <li>@Html.ActionLink("Galery", "Index", "MK_PROTECTEDAREAS_EEACDDAV15__ATTACH")</li>
                    <li>@Html.ActionLink("Map", "Map2", "Map")</li>

                </ul>
            </div>
        </div>
    </div>
    <div id="button" style="height:3%">
        <button id="satelite" style="height:100%" class="btn-primary">Satelite</button>
        <button id="topo" style="height:100%" class="btn-primary">Topo</button>
        <button id="gray" style="height:100%" class="btn-primary">Gray</button>
        <button id="street" style="height:100%" class="btn-primary">Streets</button>
    </div>
    <div id="viewDiv" style="height:90%">

    </div>
    <div class="container body-content">

        <hr />
        <footer>
            <p>&copy; @DateTime.Now.Year - My ASP.NET Application</p>
        </footer>
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/Content/css")
    <script src="//cdn.datatables.net/1.10.12/js/jquery.dataTables.min.js"></script>

</body>
</html>
